<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exercises on data Blog = Blog { me :: Programmer, posts :: [Opinion] }</title>
    <link>https://asthasr.github.io/tags/exercises/</link>
    <description>Recent content in exercises on data Blog = Blog { me :: Programmer, posts :: [Opinion] }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2022 08:47:10 -0400</lastBuildDate><atom:link href="https://asthasr.github.io/tags/exercises/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding the Strategy Pattern</title>
      <link>https://asthasr.github.io/posts/understanding-strategy-pattern/</link>
      <pubDate>Sun, 03 Apr 2022 08:47:10 -0400</pubDate>
      
      <guid>https://asthasr.github.io/posts/understanding-strategy-pattern/</guid>
      <description>Conditionals (if, switch, and match statements) are usually the first tool programmers reach for when we need to vary the execution of a function. They&amp;rsquo;re easy to understand and convenient to use, as long as the variations are simple. As software grows, though, extensibility and comprehensibility begin to require that we create ways to &amp;ldquo;hook&amp;rdquo; new functionality into our functions. The strategy pattern offers a method to accomplish that:
 Define a family of algorithms, encapsulate each one, and make them interchangeable.</description>
    </item>
    
    <item>
      <title>Loops and Recursion</title>
      <link>https://asthasr.github.io/posts/loops-and-recursion/</link>
      <pubDate>Sun, 22 Dec 2019 08:27:13 +0700</pubDate>
      
      <guid>https://asthasr.github.io/posts/loops-and-recursion/</guid>
      <description>Recursion was a concept that took me a long time to understand. It wasn&amp;rsquo;t until years after I&amp;rsquo;d started programming that I felt I really understood it, and it wasn&amp;rsquo;t until years after that that I felt confident reaching for it as a tool. Like almost everyone, the first way that I learned to think of iteration was with loops. If you wanted to add something together, for example, you would create a &amp;ldquo;bookkeeping&amp;rdquo; variable and modify it inside the loop.</description>
    </item>
    
  </channel>
</rss>
