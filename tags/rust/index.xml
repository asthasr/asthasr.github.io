<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on data Blog = Blog { me :: Programmer, posts :: [Opinion] }</title>
    <link>https://asthasr.github.io/tags/rust/</link>
    <description>Recent content in rust on data Blog = Blog { me :: Programmer, posts :: [Opinion] }</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2022 08:47:10 -0400</lastBuildDate>
    
	<atom:link href="https://asthasr.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Understanding the Strategy Pattern</title>
      <link>https://asthasr.github.io/posts/understanding-strategy-pattern/</link>
      <pubDate>Sun, 03 Apr 2022 08:47:10 -0400</pubDate>
      
      <guid>https://asthasr.github.io/posts/understanding-strategy-pattern/</guid>
      <description>Conditionals (if, switch, and match statements) are usually the first programmers reach for when we need to vary the execution of a function. They&amp;rsquo;re easy to understand and convenient to use, as long as the variations are simple. As software grows, though, extensibility and comprehensibility begin to require that we create ways to &amp;ldquo;hook&amp;rdquo; new functionality into our functions. The strategy pattern offers a method to accomplish that:
 Define a family of algorithms, encapsulate each one, and make them interchangeable.</description>
    </item>
    
    <item>
      <title>Rust Needs Metaphors, Part 2: Traits</title>
      <link>https://asthasr.github.io/posts/rust-needs-metaphors-2/</link>
      <pubDate>Wed, 14 Oct 2020 06:29:48 -0400</pubDate>
      
      <guid>https://asthasr.github.io/posts/rust-needs-metaphors-2/</guid>
      <description>When I began learning Haskell, typeclasses were confusing to me: at first, because I didn&amp;rsquo;t fully understand why they were needed, and later, because I didn&amp;rsquo;t understand the advantages they offered over Java&amp;rsquo;s interfaces. If you&amp;rsquo;re new to Rust but haven&amp;rsquo;t used Haskell before, you&amp;rsquo;ll likely be in the same boat, but moreso; traits are pervasive in the ecosystem.
At heart, traits are very similar to interfaces in Java or Câ™¯.</description>
    </item>
    
    <item>
      <title>Rust Needs Metaphors, Part 1: Lifetimes</title>
      <link>https://asthasr.github.io/posts/rust-needs-metaphors-1/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://asthasr.github.io/posts/rust-needs-metaphors-1/</guid>
      <description>I recently had a conversation with a friend who said: &amp;ldquo;I don&amp;rsquo;t trust most of what I hear about Rust, because it sounds like agitprop from the Rust Evangelism Strike Force, but people like you whom I trust and respect seem to like it. Can you help me understand why?&amp;rdquo;
I tried to. I said things that make sense, in the abstract: it offers a very powerful type system, it allows me to feel more confident about my code in surprising ways, and so on.</description>
    </item>
    
  </channel>
</rss>